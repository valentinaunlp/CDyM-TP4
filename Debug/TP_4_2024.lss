
TP_4_2024.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  0000061c  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001c8  008001c8  00000778  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4a  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000988  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000854  00000000  00000000  000020c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000489  00000000  00000000  000031d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3c       	cpi	r26, 0xC8	; 200
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ec       	ldi	r26, 0xC8	; 200
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3c       	cpi	r26, 0xCE	; 206
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 0c 03 	jmp	0x618	; 0x618 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include "ADC.h"

void ADC_Init(uint8_t canal){
	
	// Ajusta resultado a la derecha
	ADMUX &=~ (1<<ADLAR);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	9f 7d       	andi	r25, 0xDF	; 223
  ae:	90 83       	st	Z, r25

	// Voltage de ref = AVCC //
	ADMUX |=  (1<<REFS0);
  b0:	90 81       	ld	r25, Z
  b2:	90 64       	ori	r25, 0x40	; 64
  b4:	90 83       	st	Z, r25
	ADMUX &=~ (1<<REFS1);
  b6:	90 81       	ld	r25, Z
  b8:	9f 77       	andi	r25, 0x7F	; 127
  ba:	90 83       	st	Z, r25

	// Divisor de frecuencia = 128 -> 16000/128 = 125 KHz
	ADCSRA |= (1<<ADPS0);
  bc:	aa e7       	ldi	r26, 0x7A	; 122
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	9c 91       	ld	r25, X
  c2:	91 60       	ori	r25, 0x01	; 1
  c4:	9c 93       	st	X, r25
	ADCSRA |= (1<<ADPS1);
  c6:	9c 91       	ld	r25, X
  c8:	92 60       	ori	r25, 0x02	; 2
  ca:	9c 93       	st	X, r25
	ADCSRA |= (1<<ADPS2);
  cc:	9c 91       	ld	r25, X
  ce:	94 60       	ori	r25, 0x04	; 4
  d0:	9c 93       	st	X, r25
	
	// Selección del canal del ADC
	ADMUX &=~  0x0F;
  d2:	90 81       	ld	r25, Z
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	90 83       	st	Z, r25
	ADMUX |=  canal;
  d8:	90 81       	ld	r25, Z
  da:	89 2b       	or	r24, r25
  dc:	80 83       	st	Z, r24
	
	// Encendemos el ADC
	ADCSRA |= (1<<ADEN);
  de:	8c 91       	ld	r24, X
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	85 e3       	ldi	r24, 0x35	; 53
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <ADC_Init+0x40>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <ADC_Read>:
}

uint16_t ADC_Read(){

	// Empezar conversion
	ADCSRA |= (1<<ADSC);
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24

	// Esperar hasta que finalice conversión
	while( !(ADCSRA & (1<<ADIF)) );
  f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	84 ff       	sbrs	r24, 4
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <ADC_Read+0xa>
	ADCSRA |= (1<<ADIF);	// Reiniciamos el flag
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 61       	ori	r24, 0x10	; 16
 108:	80 83       	st	Z, r24

	return ADC;
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 112:	08 95       	ret

00000114 <main>:
//variable para guardar el dato del ADC
uint16_t dato_adc;

int main(void){
	
    SerialPort_Init(BR9600); 			// Inicializo formato 8N1 y BAUDRATE = 9600bps
 114:	87 e6       	ldi	r24, 0x67	; 103
 116:	0e 94 a2 01 	call	0x344	; 0x344 <SerialPort_Init>
    SerialPort_TX_Enable();				// Activo el Transmisor del Puerto Serie
 11a:	0e 94 ac 01 	call	0x358	; 0x358 <SerialPort_TX_Enable>
    SerialPort_RX_Enable();				// Activo el Receptor del Puerto Serie
 11e:	0e 94 b2 01 	call	0x364	; 0x364 <SerialPort_RX_Enable>
    SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion.
 122:	0e 94 b8 01 	call	0x370	; 0x370 <SerialPort_RX_Interrupt_Enable>
    ADC_Init(3);						// Inicializo ADC y configuro canal 3 para la comunicación
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	RGB_Init();							// Inicializo RGB
 12c:	0e 94 35 01 	call	0x26a	; 0x26a <RGB_Init>
	sei();								// Activo interrup globales
 130:	78 94       	sei

	SerialPort_Send_String("Presione R, G o B para cambiar el color\r\n");
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 c6 01 	call	0x38c	; 0x38c <SerialPort_Send_String>
    while (1) {
		// Si se selecciona color R, G o B se lee el potenciometro y modifica intensidad
		if((LED_COLOR == 'R') || (LED_COLOR == 'G') ||(LED_COLOR == 'B')) {		
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13e:	82 35       	cpi	r24, 0x52	; 82
 140:	41 f0       	breq	.+16     	; 0x152 <main+0x3e>
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	87 34       	cpi	r24, 0x47	; 71
 148:	21 f0       	breq	.+8      	; 0x152 <main+0x3e>
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	82 34       	cpi	r24, 0x42	; 66
 150:	a1 f7       	brne	.-24     	; 0x13a <main+0x26>
			dato_adc = ADC_Read();	//Lectura del potenciometro			
 152:	0e 94 77 00 	call	0xee	; 0xee <ADC_Read>
 156:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <dato_adc+0x1>
 15a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <dato_adc>
			uint8_t intensidad = (255.0/1023)*dato_adc;		//Convierte dato del potenciometro en una intensidad de 0 a 255
 15e:	bc 01       	movw	r22, r24
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 11 02 	call	0x422	; 0x422 <__floatunsisf>
 168:	20 ed       	ldi	r18, 0xD0	; 208
 16a:	3f e3       	ldi	r19, 0x3F	; 63
 16c:	4f e7       	ldi	r20, 0x7F	; 127
 16e:	5e e3       	ldi	r21, 0x3E	; 62
 170:	0e 94 77 02 	call	0x4ee	; 0x4ee <__mulsf3>
 174:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fixunssfsi>
 178:	86 2f       	mov	r24, r22
			LED_Intensidad(intensidad,LED_COLOR);			//Modifica intensidad del led enviado por parametro
 17a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 11 01 	call	0x222	; 0x222 <LED_Intensidad>
 184:	da cf       	rjmp	.-76     	; 0x13a <main+0x26>

00000186 <__vector_18>:
		}
	}
}

ISR(USART_RX_vect){
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	RX_Buffer = UDR0;
 1a8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ac:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end>
	if((RX_Buffer == 'R')){
 1b0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 1b4:	82 35       	cpi	r24, 0x52	; 82
 1b6:	39 f4       	brne	.+14     	; 0x1c6 <__vector_18+0x40>
		LED_COLOR='R';
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		SerialPort_Send_String("Intensidad LED RED  \r\n");
 1bc:	8c e2       	ldi	r24, 0x2C	; 44
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 c6 01 	call	0x38c	; 0x38c <SerialPort_Send_String>
 1c4:	1d c0       	rjmp	.+58     	; 0x200 <__vector_18+0x7a>
	} else if((RX_Buffer == 'G')){
 1c6:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 1ca:	87 34       	cpi	r24, 0x47	; 71
 1cc:	39 f4       	brne	.+14     	; 0x1dc <__vector_18+0x56>
		LED_COLOR='G';
 1ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		SerialPort_Send_String("Intensidad LED GREEN  \r\n");
 1d2:	83 e4       	ldi	r24, 0x43	; 67
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 c6 01 	call	0x38c	; 0x38c <SerialPort_Send_String>
 1da:	12 c0       	rjmp	.+36     	; 0x200 <__vector_18+0x7a>
	} else if((RX_Buffer == 'B')){
 1dc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 1e0:	82 34       	cpi	r24, 0x42	; 66
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <__vector_18+0x6c>
		LED_COLOR='B';
 1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		SerialPort_Send_String("Intensidad LED BLUE  \r\n");
 1e8:	8c e5       	ldi	r24, 0x5C	; 92
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 c6 01 	call	0x38c	; 0x38c <SerialPort_Send_String>
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <__vector_18+0x7a>
	} else{
		LED_COLOR='N';
 1f2:	8e e4       	ldi	r24, 0x4E	; 78
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		SerialPort_Send_String("Lectura del potenciometro pausada - Ingrese un color (R, G o B) para continuar  \r\n");
 1f8:	84 e7       	ldi	r24, 0x74	; 116
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 c6 01 	call	0x38c	; 0x38c <SerialPort_Send_String>
	}
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <LED_Intensidad>:
	timer0_init();
	
}

void LED_Intensidad(uint16_t intensidad, uint8_t color){
	if (color == 'R') {
 222:	62 35       	cpi	r22, 0x52	; 82
 224:	19 f4       	brne	.+6      	; 0x22c <LED_Intensidad+0xa>
		top_red = intensidad;
 226:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <top_red>
 22a:	08 95       	ret
    } else if (color == 'G') {
 22c:	67 34       	cpi	r22, 0x47	; 71
 22e:	29 f4       	brne	.+10     	; 0x23a <LED_Intensidad+0x18>
			OCR1B = intensidad;
 230:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 234:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 238:	08 95       	ret
	} else if (color == 'B') {
 23a:	62 34       	cpi	r22, 0x42	; 66
 23c:	21 f4       	brne	.+8      	; 0x246 <LED_Intensidad+0x24>
			OCR1A = intensidad;
 23e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 242:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 246:	08 95       	ret

00000248 <timer0_init>:
	}
}

void timer0_init() {
	// Modo CTC
	TCCR0A |= (1 << WGM01);
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	84 bd       	out	0x24, r24	; 36
	
	// Valor de comparación
	OCR0A = 15;
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	87 bd       	out	0x27, r24	; 39
	
	// Habilitar interrupción de Timer0
	TIMSK0 |= (1 << OCIE0A);
 252:	ee e6       	ldi	r30, 0x6E	; 110
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	80 83       	st	Z, r24
	
	// Preescalador de 64
	TCCR0B |= (1 << CS01) | (1 << CS00);
 25c:	85 b5       	in	r24, 0x25	; 37
 25e:	83 60       	ori	r24, 0x03	; 3
 260:	85 bd       	out	0x25, r24	; 37
	
	PORTB |= (1<<PORTB5);
 262:	85 b1       	in	r24, 0x05	; 5
 264:	80 62       	ori	r24, 0x20	; 32
 266:	85 b9       	out	0x05, r24	; 5
 268:	08 95       	ret

0000026a <RGB_Init>:


void RGB_Init(){
	
	//Configura los pines PB1, PB2 y PB5 como salida
	DDRB |= (1 << PINB1) | (1 << PINB2) | (1<<PINB5);
 26a:	84 b1       	in	r24, 0x04	; 4
 26c:	86 62       	ori	r24, 0x26	; 38
 26e:	84 b9       	out	0x04, r24	; 4

	// Configurar Timer1 para PWM en modo no invertido en OC1A (PB1), OC1B (PB2)	
	// Modo no invertido para ambos canales
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
 270:	e0 e8       	ldi	r30, 0x80	; 128
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 6a       	ori	r24, 0xA0	; 160
 278:	80 83       	st	Z, r24
	
	// Modo Fast PWM 8 bits. TOP=255
	TCCR1A |= (1 << WGM10);
 27a:	80 81       	ld	r24, Z
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12);
 280:	e1 e8       	ldi	r30, 0x81	; 129
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	88 60       	ori	r24, 0x08	; 8
 288:	80 83       	st	Z, r24
	
	// Prescaler de 1024
	TCCR1B |= (1 << CS12) | (1 << CS10);
 28a:	80 81       	ld	r24, Z
 28c:	85 60       	ori	r24, 0x05	; 5
 28e:	80 83       	st	Z, r24
	
	// Para que la señal sea igual o mayor a 50 Hz OCR1X debe ser menor o igual a 156 con un preescaler de 1024 (En interrupción, NO EN FAST PWM)
	OCR1B = 255;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 298:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = 255;
 29c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	timer0_init();
 2a4:	0e 94 24 01 	call	0x248	; 0x248 <timer0_init>
 2a8:	08 95       	ret

000002aa <__vector_14>:
	
	PORTB |= (1<<PORTB5);
	
}

ISR(TIMER0_COMPA_vect) {
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
	volatile static uint8_t contador1 = 0;
	volatile static uint8_t contador2 = 0;
	volatile static uint8_t nivel_bajo = 0;

	if (contador1 < top_red) {
 2c4:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <contador1.1953>
 2c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <top_red>
 2cc:	98 17       	cp	r25, r24
 2ce:	30 f4       	brcc	.+12     	; 0x2dc <__vector_14+0x32>
		contador1++;
 2d0:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <contador1.1953>
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <contador1.1953>
 2da:	27 c0       	rjmp	.+78     	; 0x32a <__vector_14+0x80>
	} else { if(!nivel_bajo) {
 2dc:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <nivel_bajo.1955>
 2e0:	91 11       	cpse	r25, r1
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <__vector_14+0x4a>
				nivel_bajo = 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <nivel_bajo.1955>
				PORTB ^= (1 << PORTB5);
 2ea:	95 b1       	in	r25, 0x05	; 5
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	89 27       	eor	r24, r25
 2f0:	85 b9       	out	0x05, r24	; 5
 2f2:	1b c0       	rjmp	.+54     	; 0x32a <__vector_14+0x80>
				} else { if (contador2 < (255-top_red)) {
 2f4:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <contador2.1954>
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	b9 01       	movw	r22, r18
 300:	68 1b       	sub	r22, r24
 302:	71 09       	sbc	r23, r1
 304:	46 17       	cp	r20, r22
 306:	57 07       	cpc	r21, r23
 308:	34 f4       	brge	.+12     	; 0x316 <__vector_14+0x6c>
							contador2++;
 30a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <contador2.1954>
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <contador2.1954>
 314:	0a c0       	rjmp	.+20     	; 0x32a <__vector_14+0x80>
						} else {
							PORTB ^= (1 << PORTB5);
 316:	95 b1       	in	r25, 0x05	; 5
 318:	80 e2       	ldi	r24, 0x20	; 32
 31a:	89 27       	eor	r24, r25
 31c:	85 b9       	out	0x05, r24	; 5
							contador1 = 0;
 31e:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <contador1.1953>
							contador2 = 0;
 322:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <contador2.1954>
							nivel_bajo = 0;
 326:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <nivel_bajo.1955>
						}
			}
	}
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 344:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 348:	96 e0       	ldi	r25, 0x06	; 6
 34a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 34e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 352:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 356:	08 95       	ret

00000358 <SerialPort_TX_Enable>:
 358:	e1 ec       	ldi	r30, 0xC1	; 193
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	88 60       	ori	r24, 0x08	; 8
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 364:	e1 ec       	ldi	r30, 0xC1	; 193
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	80 61       	ori	r24, 0x10	; 16
 36c:	80 83       	st	Z, r24
 36e:	08 95       	ret

00000370 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 370:	e1 ec       	ldi	r30, 0xC1	; 193
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	80 68       	ori	r24, 0x80	; 128
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 37c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 380:	85 ff       	sbrs	r24, 5
 382:	fc cf       	rjmp	.-8      	; 0x37c <SerialPort_Wait_For_TX_Buffer_Free>
}
 384:	08 95       	ret

00000386 <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 386:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 38a:	08 95       	ret

0000038c <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 38c:	ef 92       	push	r14
 38e:	ff 92       	push	r15
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 398:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 39a:	07 c0       	rjmp	.+14     	; 0x3aa <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 39c:	0e 94 be 01 	call	0x37c	; 0x37c <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 3a0:	f8 01       	movw	r30, r16
 3a2:	80 81       	ld	r24, Z
 3a4:	0e 94 c3 01 	call	0x386	; 0x386 <SerialPort_Send_Data>
		i++;
 3a8:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 3aa:	87 01       	movw	r16, r14
 3ac:	0c 0f       	add	r16, r28
 3ae:	11 1d       	adc	r17, r1
 3b0:	f8 01       	movw	r30, r16
 3b2:	80 81       	ld	r24, Z
 3b4:	81 11       	cpse	r24, r1
 3b6:	f2 cf       	rjmp	.-28     	; 0x39c <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	08 95       	ret

000003c4 <__fixunssfsi>:
 3c4:	0e 94 56 02 	call	0x4ac	; 0x4ac <__fp_splitA>
 3c8:	88 f0       	brcs	.+34     	; 0x3ec <__fixunssfsi+0x28>
 3ca:	9f 57       	subi	r25, 0x7F	; 127
 3cc:	98 f0       	brcs	.+38     	; 0x3f4 <__fixunssfsi+0x30>
 3ce:	b9 2f       	mov	r27, r25
 3d0:	99 27       	eor	r25, r25
 3d2:	b7 51       	subi	r27, 0x17	; 23
 3d4:	b0 f0       	brcs	.+44     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3d6:	e1 f0       	breq	.+56     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	1a f0       	brmi	.+6      	; 0x3e8 <__fixunssfsi+0x24>
 3e2:	ba 95       	dec	r27
 3e4:	c9 f7       	brne	.-14     	; 0x3d8 <__fixunssfsi+0x14>
 3e6:	14 c0       	rjmp	.+40     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3e8:	b1 30       	cpi	r27, 0x01	; 1
 3ea:	91 f0       	breq	.+36     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ec:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_zero>
 3f0:	b1 e0       	ldi	r27, 0x01	; 1
 3f2:	08 95       	ret
 3f4:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_zero>
 3f8:	67 2f       	mov	r22, r23
 3fa:	78 2f       	mov	r23, r24
 3fc:	88 27       	eor	r24, r24
 3fe:	b8 5f       	subi	r27, 0xF8	; 248
 400:	39 f0       	breq	.+14     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 402:	b9 3f       	cpi	r27, 0xF9	; 249
 404:	cc f3       	brlt	.-14     	; 0x3f8 <__fixunssfsi+0x34>
 406:	86 95       	lsr	r24
 408:	77 95       	ror	r23
 40a:	67 95       	ror	r22
 40c:	b3 95       	inc	r27
 40e:	d9 f7       	brne	.-10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 410:	3e f4       	brtc	.+14     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 412:	90 95       	com	r25
 414:	80 95       	com	r24
 416:	70 95       	com	r23
 418:	61 95       	neg	r22
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8f 4f       	sbci	r24, 0xFF	; 255
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	08 95       	ret

00000422 <__floatunsisf>:
 422:	e8 94       	clt
 424:	09 c0       	rjmp	.+18     	; 0x438 <__floatsisf+0x12>

00000426 <__floatsisf>:
 426:	97 fb       	bst	r25, 7
 428:	3e f4       	brtc	.+14     	; 0x438 <__floatsisf+0x12>
 42a:	90 95       	com	r25
 42c:	80 95       	com	r24
 42e:	70 95       	com	r23
 430:	61 95       	neg	r22
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	99 23       	and	r25, r25
 43a:	a9 f0       	breq	.+42     	; 0x466 <__floatsisf+0x40>
 43c:	f9 2f       	mov	r31, r25
 43e:	96 e9       	ldi	r25, 0x96	; 150
 440:	bb 27       	eor	r27, r27
 442:	93 95       	inc	r25
 444:	f6 95       	lsr	r31
 446:	87 95       	ror	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f1 11       	cpse	r31, r1
 450:	f8 cf       	rjmp	.-16     	; 0x442 <__floatsisf+0x1c>
 452:	fa f4       	brpl	.+62     	; 0x492 <__floatsisf+0x6c>
 454:	bb 0f       	add	r27, r27
 456:	11 f4       	brne	.+4      	; 0x45c <__floatsisf+0x36>
 458:	60 ff       	sbrs	r22, 0
 45a:	1b c0       	rjmp	.+54     	; 0x492 <__floatsisf+0x6c>
 45c:	6f 5f       	subi	r22, 0xFF	; 255
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	16 c0       	rjmp	.+44     	; 0x492 <__floatsisf+0x6c>
 466:	88 23       	and	r24, r24
 468:	11 f0       	breq	.+4      	; 0x46e <__floatsisf+0x48>
 46a:	96 e9       	ldi	r25, 0x96	; 150
 46c:	11 c0       	rjmp	.+34     	; 0x490 <__floatsisf+0x6a>
 46e:	77 23       	and	r23, r23
 470:	21 f0       	breq	.+8      	; 0x47a <__floatsisf+0x54>
 472:	9e e8       	ldi	r25, 0x8E	; 142
 474:	87 2f       	mov	r24, r23
 476:	76 2f       	mov	r23, r22
 478:	05 c0       	rjmp	.+10     	; 0x484 <__floatsisf+0x5e>
 47a:	66 23       	and	r22, r22
 47c:	71 f0       	breq	.+28     	; 0x49a <__floatsisf+0x74>
 47e:	96 e8       	ldi	r25, 0x86	; 134
 480:	86 2f       	mov	r24, r22
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	2a f0       	brmi	.+10     	; 0x492 <__floatsisf+0x6c>
 488:	9a 95       	dec	r25
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	88 1f       	adc	r24, r24
 490:	da f7       	brpl	.-10     	; 0x488 <__floatsisf+0x62>
 492:	88 0f       	add	r24, r24
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	97 f9       	bld	r25, 7
 49a:	08 95       	ret

0000049c <__fp_split3>:
 49c:	57 fd       	sbrc	r21, 7
 49e:	90 58       	subi	r25, 0x80	; 128
 4a0:	44 0f       	add	r20, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	59 f0       	breq	.+22     	; 0x4bc <__fp_splitA+0x10>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <__fp_splitA+0x1a>
 4aa:	47 95       	ror	r20

000004ac <__fp_splitA>:
 4ac:	88 0f       	add	r24, r24
 4ae:	97 fb       	bst	r25, 7
 4b0:	99 1f       	adc	r25, r25
 4b2:	61 f0       	breq	.+24     	; 0x4cc <__fp_splitA+0x20>
 4b4:	9f 3f       	cpi	r25, 0xFF	; 255
 4b6:	79 f0       	breq	.+30     	; 0x4d6 <__fp_splitA+0x2a>
 4b8:	87 95       	ror	r24
 4ba:	08 95       	ret
 4bc:	12 16       	cp	r1, r18
 4be:	13 06       	cpc	r1, r19
 4c0:	14 06       	cpc	r1, r20
 4c2:	55 1f       	adc	r21, r21
 4c4:	f2 cf       	rjmp	.-28     	; 0x4aa <__fp_split3+0xe>
 4c6:	46 95       	lsr	r20
 4c8:	f1 df       	rcall	.-30     	; 0x4ac <__fp_splitA>
 4ca:	08 c0       	rjmp	.+16     	; 0x4dc <__fp_splitA+0x30>
 4cc:	16 16       	cp	r1, r22
 4ce:	17 06       	cpc	r1, r23
 4d0:	18 06       	cpc	r1, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	f1 cf       	rjmp	.-30     	; 0x4b8 <__fp_splitA+0xc>
 4d6:	86 95       	lsr	r24
 4d8:	71 05       	cpc	r23, r1
 4da:	61 05       	cpc	r22, r1
 4dc:	08 94       	sec
 4de:	08 95       	ret

000004e0 <__fp_zero>:
 4e0:	e8 94       	clt

000004e2 <__fp_szero>:
 4e2:	bb 27       	eor	r27, r27
 4e4:	66 27       	eor	r22, r22
 4e6:	77 27       	eor	r23, r23
 4e8:	cb 01       	movw	r24, r22
 4ea:	97 f9       	bld	r25, 7
 4ec:	08 95       	ret

000004ee <__mulsf3>:
 4ee:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3x>
 4f2:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_round>
 4f6:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_pscA>
 4fa:	38 f0       	brcs	.+14     	; 0x50a <__mulsf3+0x1c>
 4fc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fp_pscB>
 500:	20 f0       	brcs	.+8      	; 0x50a <__mulsf3+0x1c>
 502:	95 23       	and	r25, r21
 504:	11 f0       	breq	.+4      	; 0x50a <__mulsf3+0x1c>
 506:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_inf>
 50a:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_nan>
 50e:	11 24       	eor	r1, r1
 510:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_szero>

00000514 <__mulsf3x>:
 514:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_split3>
 518:	70 f3       	brcs	.-36     	; 0x4f6 <__mulsf3+0x8>

0000051a <__mulsf3_pse>:
 51a:	95 9f       	mul	r25, r21
 51c:	c1 f3       	breq	.-16     	; 0x50e <__mulsf3+0x20>
 51e:	95 0f       	add	r25, r21
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	55 1f       	adc	r21, r21
 524:	62 9f       	mul	r22, r18
 526:	f0 01       	movw	r30, r0
 528:	72 9f       	mul	r23, r18
 52a:	bb 27       	eor	r27, r27
 52c:	f0 0d       	add	r31, r0
 52e:	b1 1d       	adc	r27, r1
 530:	63 9f       	mul	r22, r19
 532:	aa 27       	eor	r26, r26
 534:	f0 0d       	add	r31, r0
 536:	b1 1d       	adc	r27, r1
 538:	aa 1f       	adc	r26, r26
 53a:	64 9f       	mul	r22, r20
 53c:	66 27       	eor	r22, r22
 53e:	b0 0d       	add	r27, r0
 540:	a1 1d       	adc	r26, r1
 542:	66 1f       	adc	r22, r22
 544:	82 9f       	mul	r24, r18
 546:	22 27       	eor	r18, r18
 548:	b0 0d       	add	r27, r0
 54a:	a1 1d       	adc	r26, r1
 54c:	62 1f       	adc	r22, r18
 54e:	73 9f       	mul	r23, r19
 550:	b0 0d       	add	r27, r0
 552:	a1 1d       	adc	r26, r1
 554:	62 1f       	adc	r22, r18
 556:	83 9f       	mul	r24, r19
 558:	a0 0d       	add	r26, r0
 55a:	61 1d       	adc	r22, r1
 55c:	22 1f       	adc	r18, r18
 55e:	74 9f       	mul	r23, r20
 560:	33 27       	eor	r19, r19
 562:	a0 0d       	add	r26, r0
 564:	61 1d       	adc	r22, r1
 566:	23 1f       	adc	r18, r19
 568:	84 9f       	mul	r24, r20
 56a:	60 0d       	add	r22, r0
 56c:	21 1d       	adc	r18, r1
 56e:	82 2f       	mov	r24, r18
 570:	76 2f       	mov	r23, r22
 572:	6a 2f       	mov	r22, r26
 574:	11 24       	eor	r1, r1
 576:	9f 57       	subi	r25, 0x7F	; 127
 578:	50 40       	sbci	r21, 0x00	; 0
 57a:	9a f0       	brmi	.+38     	; 0x5a2 <__mulsf3_pse+0x88>
 57c:	f1 f0       	breq	.+60     	; 0x5ba <__mulsf3_pse+0xa0>
 57e:	88 23       	and	r24, r24
 580:	4a f0       	brmi	.+18     	; 0x594 <__mulsf3_pse+0x7a>
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	bb 1f       	adc	r27, r27
 588:	66 1f       	adc	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	91 50       	subi	r25, 0x01	; 1
 590:	50 40       	sbci	r21, 0x00	; 0
 592:	a9 f7       	brne	.-22     	; 0x57e <__mulsf3_pse+0x64>
 594:	9e 3f       	cpi	r25, 0xFE	; 254
 596:	51 05       	cpc	r21, r1
 598:	80 f0       	brcs	.+32     	; 0x5ba <__mulsf3_pse+0xa0>
 59a:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_inf>
 59e:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_szero>
 5a2:	5f 3f       	cpi	r21, 0xFF	; 255
 5a4:	e4 f3       	brlt	.-8      	; 0x59e <__mulsf3_pse+0x84>
 5a6:	98 3e       	cpi	r25, 0xE8	; 232
 5a8:	d4 f3       	brlt	.-12     	; 0x59e <__mulsf3_pse+0x84>
 5aa:	86 95       	lsr	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f7 95       	ror	r31
 5b4:	e7 95       	ror	r30
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	c1 f7       	brne	.-16     	; 0x5aa <__mulsf3_pse+0x90>
 5ba:	fe 2b       	or	r31, r30
 5bc:	88 0f       	add	r24, r24
 5be:	91 1d       	adc	r25, r1
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <__fp_inf>:
 5c8:	97 f9       	bld	r25, 7
 5ca:	9f 67       	ori	r25, 0x7F	; 127
 5cc:	80 e8       	ldi	r24, 0x80	; 128
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	08 95       	ret

000005d4 <__fp_nan>:
 5d4:	9f ef       	ldi	r25, 0xFF	; 255
 5d6:	80 ec       	ldi	r24, 0xC0	; 192
 5d8:	08 95       	ret

000005da <__fp_pscA>:
 5da:	00 24       	eor	r0, r0
 5dc:	0a 94       	dec	r0
 5de:	16 16       	cp	r1, r22
 5e0:	17 06       	cpc	r1, r23
 5e2:	18 06       	cpc	r1, r24
 5e4:	09 06       	cpc	r0, r25
 5e6:	08 95       	ret

000005e8 <__fp_pscB>:
 5e8:	00 24       	eor	r0, r0
 5ea:	0a 94       	dec	r0
 5ec:	12 16       	cp	r1, r18
 5ee:	13 06       	cpc	r1, r19
 5f0:	14 06       	cpc	r1, r20
 5f2:	05 06       	cpc	r0, r21
 5f4:	08 95       	ret

000005f6 <__fp_round>:
 5f6:	09 2e       	mov	r0, r25
 5f8:	03 94       	inc	r0
 5fa:	00 0c       	add	r0, r0
 5fc:	11 f4       	brne	.+4      	; 0x602 <__fp_round+0xc>
 5fe:	88 23       	and	r24, r24
 600:	52 f0       	brmi	.+20     	; 0x616 <__fp_round+0x20>
 602:	bb 0f       	add	r27, r27
 604:	40 f4       	brcc	.+16     	; 0x616 <__fp_round+0x20>
 606:	bf 2b       	or	r27, r31
 608:	11 f4       	brne	.+4      	; 0x60e <__fp_round+0x18>
 60a:	60 ff       	sbrs	r22, 0
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__fp_round+0x20>
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	8f 4f       	sbci	r24, 0xFF	; 255
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	08 95       	ret

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
